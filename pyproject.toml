[build-system]
requires = [
  "cython",
  "meson[ninja]",
  "meson-python",
]
build-backend = "mesonpy"

[project]
name = 'yarl'
version = '1.18.4.dev0'
readme = "README.rst"
authors = [
  { name = 'aiohttp team', email = 'team@aiohttp.org' },
]
classifiers = [
  'Development Status :: 5 - Production/Stable',

  'Intended Audience :: Developers',

  'License :: OSI Approved :: Apache Software License',

  'Programming Language :: Cython',
  'Programming Language :: Python',
  'Programming Language :: Python :: 3',
  'Programming Language :: Python :: 3.9',
  'Programming Language :: Python :: 3.10',
  'Programming Language :: Python :: 3.11',
  'Programming Language :: Python :: 3.12',
  'Programming Language :: Python :: 3.13',

  'Topic :: Internet :: WWW/HTTP',
  'Topic :: Software Development :: Libraries :: Python Modules',
]

dependencies = [
  'idna >= 2.0',
  'multidict >= 4.0',
  'propcache >= 0.2.0',
]

[tool.cibuildwheel]
build-frontend = "build"
before-test = [
  # NOTE: Attempt to have pip pre-compile PyYAML wheel with our build
  # NOTE: constraints unset. The hope is that pip will cache that wheel
  # NOTE: and the test env provisioning stage will pick up PyYAML from
  # NOTE: said cache rather than attempting to build it with a conflicting.
  # NOTE: Version of Cython.
  # Ref: https://github.com/pypa/cibuildwheel/issues/1666
  "pip install PyYAML",
]
test-requires = "-r requirements/test.txt"
test-command = 'pytest -v -m "not hypothesis" --no-cov {project}/tests'
# don't build PyPy wheels, install from source instead
skip = "pp*"

[tool.cibuildwheel.environment]
COLOR = "yes"
FORCE_COLOR = "1"
MYPY_FORCE_COLOR = "1"
PRE_COMMIT_COLOR = "always"
PY_COLORS = "1"

# [tool.cibuildwheel.config-settings]
# pure-python = "false"
[tool.cibuildwheel.linux]
build-frontend = "build[uv]"

[tool.cibuildwheel.windows]
before-test = [] # Windows cmd has different syntax and pip chooses wheels
